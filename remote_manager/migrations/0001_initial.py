# -*- coding: utf-8 -*-
# Generated by Django 1.10 on 2020-03-01 07:05
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=255, unique=True, verbose_name='email address')),
                ('name', models.CharField(max_length=64)),
                ('is_active', models.BooleanField(default=True)),
                ('is_admin', models.BooleanField(default=False)),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff_status')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='HostTab',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip_addr', models.GenericIPAddressField()),
                ('port', models.PositiveSmallIntegerField(default=22)),
                ('login_user', models.CharField(max_length=16, verbose_name='用户名')),
                ('login_pwd', models.CharField(max_length=32)),
            ],
        ),
        migrations.CreateModel(
            name='IDCTab',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True)),
                ('notes', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='ProjectTab',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True, verbose_name='项目名')),
                ('pro_type', models.CharField(choices=[('---', '---'), ('app', 'app'), ('db2', 'db2'), ('oracle', 'oracle')], default='---', max_length=8, verbose_name='项目主机类型')),
                ('notes', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='SysTypeTab',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=16, unique=True, verbose_name='主机系统类型')),
                ('notes', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='TaskLogDetailTab',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('result', models.TextField()),
                ('start_date', models.DateTimeField(auto_now_add=True, null=True)),
                ('end_date', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='TaskTab',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pid', models.PositiveIntegerField(verbose_name='任务ID')),
                ('task_read', models.SmallIntegerField(choices=[(0, '未读'), (1, '已读')], verbose_name='任务查看状态')),
                ('status', models.SmallIntegerField(choices=[(0, 'success'), (1, 'failed'), (2, 'init')], verbose_name='任务执行结果状态')),
                ('date', models.DateTimeField(auto_now_add=True, null=True)),
                ('host_tab', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='remote_manager.HostTab')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='tasklogdetailtab',
            name='task',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='remote_manager.TaskTab'),
        ),
        migrations.AlterUniqueTogether(
            name='projecttab',
            unique_together=set([('name', 'pro_type')]),
        ),
        migrations.AddField(
            model_name='hosttab',
            name='idc_tab',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='remote_manager.IDCTab'),
        ),
        migrations.AddField(
            model_name='hosttab',
            name='project_tab',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='remote_manager.ProjectTab'),
        ),
        migrations.AddField(
            model_name='hosttab',
            name='sys_type_tab',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='remote_manager.SysTypeTab'),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='project_tab',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='remote_manager.ProjectTab'),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
